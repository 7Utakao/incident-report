import{P as R}from"./BBGXoVXL.js";import{u as A}from"./Dzv0W22B.js";const N=()=>{const y=R().public.apiBase,c=async(t,d={})=>{const{method:l="GET",body:u,requireAuth:s=!0,query:E={}}=d,m=Object.entries(E).filter(([e,r])=>r!=null&&r!=="").map(([e,r])=>`${encodeURIComponent(e)}=${encodeURIComponent(String(r))}`).join("&"),p=`${y}${t}${m?`?${m}`:""}`,h={"Content-Type":"application/json"};if(s)try{const{getIdToken:e}=A(),r=await e();if(r)h.Authorization=`Bearer ${r}`,console.log("JWT token added to request headers");else throw console.error("認証トークンが取得できませんでした。ログインが必要です。"),new Error("認証が必要です。ログインしてください。")}catch(e){throw console.error("認証エラー:",e),new Error("認証が必要です。ログインしてください。")}const n={method:l,headers:h};u&&(l==="POST"||l==="PUT")&&(n.body=JSON.stringify(u));try{const e=await fetch(p,n);if(!e.ok){const r=await e.json().catch(()=>({}));throw new Error(r.message||`HTTP ${e.status}: ${e.statusText}`)}return await e.json()}catch(e){throw console.error("API call failed:",e),e}},S={list:(t={})=>c("/reports",{method:"GET",query:t}),get:t=>c(`/reports/${t}`,{method:"GET"}),create:t=>c("/reports",{method:"POST",body:t})},$={summary:()=>c("/dashboard/summary",{method:"GET"})},g={generate:(()=>{let t=!1,d=0;const l=1500;return async(u,s=0)=>{if(t)throw new Error("AI生成処理が実行中です。しばらくお待ちください。");const m=Date.now(),p=m-d,h=s>0?l/2:l;if(p<h){const n=h-p;throw new Error(`前回のリクエストから${Math.ceil(n/1e3)}秒お待ちください。`)}t=!0,d=m;try{const n=`${y}/ai/generate`,{getIdToken:e}=A(),r=await e();if(!r)throw new Error("認証が必要です。ログインしてください。");const i=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify({content:u})}),w=await i.text();if(!i.ok){if(i.status===503&&s<3){const a=i.headers.get("Retry-After"),f=a?parseInt(a):2;return console.log(`503エラー: ${f}秒後にリトライします (${s+1}/3)`),await new Promise(I=>setTimeout(I,f*1e3)),t=!1,g.generate(u,s+1)}if(i.status===500&&s<3){let a={};try{a=JSON.parse(w)}catch{}if(a.message?.includes("Too many requests")||a.message?.includes("overload"))return console.log(`500エラー（過負荷）: 3秒後にリトライします (${s+1}/3)`),await new Promise(f=>setTimeout(f,3e3)),t=!1,g.generate(u,s+1)}let T={};try{T=JSON.parse(w)}catch{}if(i.status===503){const a=new Error("サービスが一時的に過負荷状態です。しばらく時間をおいて再試行してください。");throw a.statusCode=503,a}throw new Error(T.message||`AI生成に失敗しました (${i.status})`)}let o;try{o=JSON.parse(w)}catch{throw new Error(`Invalid JSON: ${w.slice(0,200)}`)}return{title:o.title??"",category:o.category??"その他",summary:o.summary??"",anonymizedText:o.anonymizedText??o.text??"",improvements:Array.isArray(o.improvements)?o.improvements:o.improvements?[o.improvements]:[],tags:o.tags??[],occurredAt:o.occurredAt??new Date().toISOString().slice(0,10),suggestedReplacements:o.suggestedReplacements??[]}}catch(n){throw console.error("AI generation failed:",n),n}finally{t=!1}}})()};return{apiCall:c,reports:S,dashboard:$,ai:g,health:()=>c("/health",{method:"GET",requireAuth:!1})}};export{N as u};
